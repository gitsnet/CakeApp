@model List<CakeApp.Areas.Admin.Models.Attributes.TagModel>
@using CakeApp.Helper
@{
    ViewBag.Title = "List";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
    ViewBag.Description = "Attribute";

}

<section class="mainbody">
    <div class="container">
        <h2>Tag List</h2>
        <div class="row">
            <div class="col-md-12">
                <!-- BEGIN EXAMPLE TABLE PORTLET-->
                <div class="portlet light">

                    <div class="portlet-body">
                        <div class="table-toolbar">
                            <div class="row">
                                <div data-alerts="alerts" data-fade="3000"></div>
                                @Html.CustomValidationSummary("Error")
                                <div class="col-md-6 pull-right" style="width:auto;">
                                    <div class="btn-group">
                                        <button id="sample_editable_1_new" class="btn" onclick="window.location.href = '/admin/Tag/AddTag'">
                                            Add Tag&nbsp;<i class="fa fa-plus"></i>
                                        </button>
                                    </div>
                                    <!--<div class="btn-group">
                                        <button id="sample_editable_1_new" class="btn green">
                                        Arrange Category&nbsp;<i class="fa fa-sliders"></i>
                                        </button>
                                    </div>-->
                                </div>

                            </div>
                        </div>
                        <table class="table table-striped table-hover table-bordered" id="taglisting">
                            <thead>
                                <tr id="filterrow">
                                    <td>Name</td>
                                    <td>Title</td>
                                   <td></td>
                                </tr>
                                <tr>
                                    <th>
                                        Name
                                    </th>
                                    <th>
                                        Title
                                    </th>
                                    <th>
                                        Action
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (Model.Count > 0)
                                {
                                    foreach (var item in Model)
                                    {
                                        <tr>
                                            <td>
                                                <input type="hidden" value="@item.TagID" class="tagid" />
                                                @Html.Label("", item.TagName, new { @class = "tagname" })
                                            </td>
                                            <td>
                                                @Html.Label("", @item.Title, new { @class = "title" })
                                            </td>

                                            <td>
                                                <a class="edit btn btn-default" href="javascript:;" data-value="@item.TagID">
                                                    <i  class="fa fa-edit"></i> Edit
                                                </a>
                                                <a class="delete btn btn-default" href="javascript:;" data-value="@item.TagID">
                                                    <i class="fa fa-close"></i> &nbsp;Delete
                                                </a>
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
                <!-- END EXAMPLE TABLE PORTLET-->
            </div>
        </div>
    </div>
</section>

<script>
    var table = $('#taglisting');
    var oTable;
    var TableEditable = function () {

        var handleTable = function () {

            function restoreRow(oTable, nRow) {
                var aData = oTable.fnGetData(nRow);
                var jqTds = $('>td', nRow);

                for (var i = 0, iLen = jqTds.length; i < iLen; i++) {
                    oTable.fnUpdate(aData[i], nRow, i, false);
                }

                oTable.fnDraw();
            }

            function editRow(oTable, nRow, TagID) {
                var aData = oTable.fnGetData(nRow);
                var jqTds = $('>td', nRow);

                var TagID = $(jqTds[0]).children(".tagid").val();
                var TagName = $(jqTds[0]).children(".tagname").text();
                var title = $(jqTds[1]).children(".title").text();

                jqTds[0].innerHTML = '<input type="hidden" class="form-control input-small hdntagid" value="' + TagID + '"><input type="text" class="form-control input-small tagname" value="' + TagName + '">';
                jqTds[1].innerHTML = '<input type="text" class="form-control input-small tagtitle" value="' + title + '">';
                jqTds[2].innerHTML = '<a class="edit btn btn-default" href=""><i href="" class="fa fa-save"></i>Save</a> <a class="cancel btn btn-default" href="" ><i href="" class="fa fa-close"></i>&nbsp;Cancel</a>';

               
            }

            function saveRow(oTable, nRow) {
               
                var jqInputs = $('input', nRow);


                var tagid = $(nRow).find(".hdntagid").val();
                var tagname = $(nRow).find(".tagname").val();
                var tagtitle = $(nRow).find(".tagtitle").val();
                console.log(tagid);
                if (tagid && tagname && tagtitle) {
                $.ajax({
                    url: "/Tag/EditTags",
                    datatype: "json",
                    type: "POST",
                    contentType: 'application/json',
                    data: JSON.stringify({ TagID: tagid, TagName: tagname, Title: tagtitle }),
                    success: function (data) {
                        if (data == "true") {
                            oTable.fnUpdate('<input class="tagid" type="hidden" value="' + tagid + '"><label class="tagname" for="">' + tagname + '</label>', nRow, 0, false);
                            oTable.fnUpdate('<label for="" class="title">' + tagtitle + '</label>', nRow, 1, false);
                            //oTable.fnUpdate("<img src='" + categoryimg + "' class='thumbnail' width='25%'>", nRow, 2, false);
                            
                            oTable.fnUpdate('<a class="edit btn btn-default" href=""><i href="" class="fa fa-edit"></i>Edit</a> <a class="delete btn btn-default" href=""><i href="" class="fa fa-close"></i>&nbsp;Delete</a>', nRow, 2, false);
                            oTable.fnDraw();
                            $(document).trigger("add-alerts", {
                                message: "Updated successfully!",
                                priority: "success"
                            });
                        }

                    },
                    error: function (err) {
                        $(document).trigger("add-alerts", {
                            message: err,
                            priority: "error"
                        });
                    }
                });
            }
        else {
                    $(document).trigger("add-alerts", {
                        message: "Wrong Input",
                        priority: "error"
                    });
            restoreRow(oTable, nRow);
        }


            }

            function cancelEditRow(oTable, nRow) {
                var jqInputs = $('input', nRow);
                oTable.fnUpdate(jqInputs[0].value, nRow, 0, false);
                oTable.fnUpdate(jqInputs[1].value, nRow, 1, false);
                oTable.fnUpdate(jqInputs[2].value, nRow, 2, false);
                oTable.fnUpdate(jqInputs[3].value, nRow, 3, false);
                oTable.fnUpdate(jqInputs[4].value, nRow, 4, false);
                oTable.fnUpdate('<a class="edit btn btn-default" href=""><i href="" class="fa fa-edit"></i>Edit</a>', nRow, 5, false);
                oTable.fnDraw();
            }

            var table = $('#taglisting');
            var count = 0;

            $('#taglisting').find("thead>tr").eq(0).find("td").each(function () {
                if (count < ($('#taglisting thead  td').length - 1)) {
                    var title = $('#taglisting thead th').eq($(this).index()).text();

                        $(this).html('<input id="' + count + '" type="text" placeholder="Search ' + title + '" class="form-control input-inline" />');
                    
                    count++;
                }
            });

            //$('#taglisting thead tr#filterrow th').each(function () {
            //    var title = $('#categoryListing thead th').eq($(this).index()).text();
            //    $(this).html('<input type="text" placeholder="Search ' + title + '" />');
            //});

            var oTable = table.dataTable({

                // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
                // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js).
                // So when dropdowns used the scrollable div should be removed.
                //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

                "lengthMenu": [
                    [5, 15, 20, -1],
                    [5, 15, 20, "All"] // change per page values here
                ],

                // Or you can use remote translation file
                //"language": {
                //   url: '//cdn.datatables.net/plug-ins/3cfcc339e89/i18n/Portuguese.json'
                //},

                // set the initial value
                "pageLength": 10,

                "language": {
                    "lengthMenu": " _MENU_ records"
                },
                "columnDefs": [{ // set default column settings
                    'orderable': true,
                    'targets': [0]
                }, {
                    "searchable": true,
                    "targets": [0]
                }],
                "order": [
                    [0, "asc"]
                ] // set first column as a default sort by asc
            });
            var tab = $('#taglisting').DataTable();
            $("#taglisting thead input").on('keyup change', function () {
                tab
                    .column($(this).parent().index() + ':visible')
                    .search(this.value)
                    .draw();
            });

            var tableWrapper = $("#sample_editable_1_wrapper");

            tableWrapper.find(".dataTables_length select").select2({
                showSearchInput: false //hide search box with special css class
            }); // initialize select2 dropdown

            var nEditing = null;
            var nNew = false;

            //$('#taglisting').click(function (e) {
            //    e.preventDefault();

            //    if (nNew && nEditing) {
            //        if (confirm("Previose row not saved. Do you want to save it ?")) {
            //            saveRow(oTable, nEditing); // save
            //            $(nEditing).find("td:first").html("Untitled");
            //            nEditing = null;
            //            nNew = false;

            //        } else {
            //            oTable.fnDeleteRow(nEditing); // cancel
            //            nEditing = null;
            //            nNew = false;

            //            return;
            //        }
            //    }

            //    var aiNew = oTable.fnAddData(['', '', '', '', '', '']);
            //    var nRow = oTable.fnGetNodes(aiNew[0]);
            //    editRow(oTable, nRow);
            //    nEditing = nRow;
            //    nNew = true;
            //});

            table.on('click', '.delete', function (e) {
                e.preventDefault();
               
                if (confirm("Are you sure to delete this row ?") == false) {
                    return;
                }
                var TagID = $(this).data('value');
                var nRow = $(this).parents('tr')[0];
               
                $.ajax({
                    type: "POST",
                    datatype: 'json',
                    data: { id: TagID },
                    url: '@Url.Action("DeleteTag", "Tag")',
                    success: function (result) {
                      
                        if (result == "true") {

                            oTable.fnDeleteRow(nRow);
                            $(document).trigger("add-alerts", {
                                message: "Deleted successfully",
                                priority: "success"
                            });
                        }
                        else {
                            $(document).trigger("add-alerts", {
                                message: result,
                                priority: "error"
                            });

                        }

                    },
                    error: function (err) {
                        $(document).trigger("add-alerts", {
                            message: err,
                            priority: "error"
                        });
                    }

                });


                    var nRow = $(this).parents('tr')[0];
                    oTable.fnDeleteRow(nRow);
                   
                });

                table.on('click', '.cancel', function (e) {
                    e.preventDefault();
                    if (nNew) {
                        oTable.fnDeleteRow(nEditing);
                        nEditing = null;
                        nNew = false;
                    } else {
                        restoreRow(oTable, nEditing);
                        nEditing = null;
                    }
                });

                table.on('click', '.edit', function (e) {

                    var TagID = $(this).data("value");
                    var regex = /(<([^>]+)>)/ig;
                    var formattedHtml = this.innerHTML.replace(regex, "").replace(/ /g, '');
                    e.preventDefault();
                    // alert(formattedHtml);
                    /* Get the row as a parent of the link that was clicked on */
                    var nRow = $(this).parents('tr')[0];

                    if (nEditing !== null && nEditing != nRow) {
                        /* Currently editing - but not this row - restore the old before continuing to edit mode */
                        restoreRow(oTable, nEditing);
                        editRow(oTable, nRow);
                        nEditing = nRow;
                    } else if (nEditing == nRow && formattedHtml == "Save") {
                        /* Editing this row and want to save it */

                        saveRow(oTable, nEditing);
                        nEditing = null;
                        //alert("Updated! Do not forget to do some ajax to sync with backend :)");
                    } else {
                        /* No edit in progress - let's start one */
                        editRow(oTable, nRow);
                        nEditing = nRow;
                    }
                });
            }
           

        return {

            //main function to initiate the module
            init: function () {
                handleTable();
            }

        };

    }();
    jQuery(document).ready(function () {

        TableEditable.init();
    });
</script>
